

---
NOTE: try both the front and backend on docker

NEEDED: key goals {
    Go: Finish Go backend for everything
    Go: Finish testing
    Go: Finish Go backend CI/CD
    -
    Node: Finish Node backend testing
    Node: Finish Node backend CI/CD
    Node: Finish Node backend testing
    Node: Finish Node backend testing
    -
    Frontend: Finish the jest test and coverage
    Frontend: Finish the cypress test and coverage
    Frontend: Finish the Frontend test CI/CD
}
NEEDED: when all keyGoals is completed, please start my us vs and OdiUp


deploy {
    deploy to staging and make sure working when merged with main branch
    ---
    deploy staging to aws and test to make sure all is working properly
    create your database @ railway for staging
}
Golang {
    Goals:
    ---
    ---
    Golang
    backEnd: work on the users_controller to see how testing can be made to be easy
    backEnd: Test the the the env been continuous_integration
    backEnd: go backEnd ci integration
    backEnd: clean up the backEnd to be able to test the users_controller properly {
        ask chatGPT, how can i do unit testing on the code
    }
    FrontEnd: Next i8n
    FrontEnd: Test with Golang to make sure login and logout is working as expected
    FrontEnd: jest and cypress test should be above 75% 
    FrontEnd: Ci/CD the Frontend
    ---
    Node:
    backend: convert the backEnd to class for easier testing
    backend: change everything to drizzle ORM
    backend: watch video on graphQl and jwt authentication
    backend: finish working on the graphQl side
    backend: finish test coverage 75%
    backend: write the ci/cd for the backend, make sure the test coverage is above 90%
    ---
    dockerize both app and test in a docker environment
    test both apps on docker and be sure that they are working as expected
    test both app in production environment on docker and be sure that they are working as expected
    sort out videos so you can pick-up the ones with the hosting
    ---

    later {
        verify a user login - function, the middleware parole
        work on the logout
        add cors to the application if the mode is production
    }

    testing {
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
        go test -v ./...
        go test -v
    }
    explanation {
        print out the coverage of your test
        convert the printout into html so you can see it on the web
        see the total average of your test cover for all the test
        verbose testing
    }
}
