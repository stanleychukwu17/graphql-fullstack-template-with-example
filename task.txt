

---
NOTE: try both the front and backend on docker

deploy {
    deploy to staging and make sure working when merged with main branch
    ---
    deploy staging to aws and test to make sure all is working properly
    create your database @ railway for staging
}
Todo {
    side_project = Golang
    main_project = FrontEnd


    NOTE: Start thur
    Golang:
    commit changes
    update users test with new account creation
    complete the remaining test - take testing to above 80%
    --
    NEEDED: Docker completion {
        Re-answer all questions
        All Dockerfile writeup
        All docker-compose writeup
        remaining revisions and questions
    }
    BackEnd: dockerize and test it in a docker container - development
    BackEnd: dockerize and test it in a docker container - production
    --
    graphQl {
        NEEDED: Revision: Graphql & Apollo Client*2;
        integrate graphql into golang
        integrate graphQl and jwt
        https://github.com/99designs/gqlgen
    }
    -
    Test the frontEnd with the dockerizeD app for {development and production}
        to make sure the graphQl works with docker
    -
    NOTE: End thur
    ---
    ---
    NOTE: Start
    user should not be able to see login page when logged in
    FrontEnd: use a skeleton for the header, in the login session, show loading skeleton that will animate until
        we verify if the user is logged in or not
        let the header sized be fixed, let it not be jumping based on who
    FrontEnd: work on preloader - when link is clicked on .. especially from homePage and Login page
    FrontEnd: redesign the theme selection
    FrontEnd: add google login and sign up {react-google-login}
    FrontEnd: jest and cypress test should be above 75%
    FrontEnd: Ci/CD the Frontend
    NEEDED: Revision: Graphql & Apollo Client*2;
    check the graphQl code and integrate with golang backEnd
    Generating apollo types, if there is any need for this
    testing of Apollo - frontend {
        apollo - set up Development & testing
        apollo - set up performance
        apollo - set up integration
        apollo - set up Networking
    }
    FrontEnd: dockerize and test it in a docker container - development & production
    -
    FrontEnd: start frontEnd in docker development and test with backend in development
    FrontEnd: start frontEnd in docker production and test with backend in production
    NOTE: End
    ---
    ---
    Node:
    NEEDED: backEnd: Node revision *2
    backEnd: Rebuild from the ground up to make it easier for testing
    backend: convert the backEnd to class for easier testing
    backend: change everything to drizzle ORM
    backend: watch video on graphQl and jwt authentication
    backend: finish working on the graphQl side
        graphql and jwt
    backend: finish test coverage 75%
    backend: write the ci/cd for the backend, make sure the test coverage is above 90%
    ---
    ---

    Infrastructure
    deploy client and server as docker containers on both railway and aws
    ---
    ---
    MyVs: Node {

    }
    OdiUp: Golang {

    }
    ---
    ---
    ---

    envs for testing {
        export ENV="development"
        export BG_USER="development"
        ---
        export ENV="continuous_integration"
        export PORT=4000
        export TIMEZONE=Africa/Lagos
        export DB_NAME=template_test_db
        export POSTGRES_DB_USER=postgres
        export POSTGRES_DB_PASSWORD=password
        export POSTGRES_DB_PORT=5432
        export MYSQL_DB_USER=root
        export MYSQL_DB_PASSWORD=root
        export MYSQL_DB_PORT=3306
        export JWT_SECRET=SGARcuH2uNZ4NNvqXo31H7erq94H2yA17Y6tqLlqpt0=
        export JWT_TIME_1=7
        export JWT_TIME_2=365
    }
    testing {
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
        go test -v ./...
        go test -v
    }
    explanation {
        go test -coverprofile=coverage.out ./...  ===  print out the coverage of your test
        go tool cover -html=coverage.out -o coverage.html  ====   convert the printout into html so you can see it on the web
        go tool cover -func=coverage.out  ===  see the total average of your test cover for all the test
        go test -v && go test -v ./... ===  verbose testing
    }
    read_response_for_test {
		// Read the response body
		responseBody, _ := io.ReadAll(resp.Body)
		responseBodyStr := string(responseBody)
		fmt.Printf("Response body: %s", responseBodyStr)
    }
}

updating a go project from one to the other {
    1.
    mkdir myProject
    cd myProject
    go mod init example.com/myProject

    2.
    go mod edit -module=github.com/username/projectName {
        Update Module Path When Ready: Once youâ€™re ready to finalize the module path, update the go.mod file to reflect the correct path. You can do this by editing the module directive in go.mod:
        module github.com/username/projectName
    }

    3.
    goimports -w .
}