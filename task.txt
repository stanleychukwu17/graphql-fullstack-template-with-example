

---
NOTE: try both the front and backend on docker

NEEDED: key goals {
    Go: Finish Go backend for everything
    Go: Finish testing
    Go: Finish Go backend CI/CD
    -
    Node: Finish Node backend testing
    Node: Finish Node backend CI/CD
    Node: Finish Node backend testing
    Node: Finish Node backend testing
    -
    Frontend: Finish the jest test and coverage
    Frontend: Finish the cypress test and coverage
    Frontend: Finish the Frontend test CI/CD
}
NEEDED: when all keyGoals is completed, please start my us vs and OdiUp


deploy {
    deploy to staging and make sure working when merged with main branch
    ---
    deploy staging to aws and test to make sure all is working properly
    create your database @ railway for staging
}
Todo {
    ---
    ---
    NOTE: Start wed
    Terraform:
    continue note and lecture if time available

    Golang:
    run continuous_integration test here on my terminal
    make sure github test is all passing
    commit all changes
    ci/cd integration, make sure test coverage is above 80% before allowing it to merge into the main branch
    start the FrontEnd and test it with go backEnd
    work on the logging out { use middleware to verify if the user can visit this link }
    write test for logging out
    -
    BackEnd: dockerize and test it in a docker container - development
    BackEnd: dockerize and test it in a docker container - production
    Test the frontEnd with the dockerizeD app for development and production
    ---
    NOTE: End wed
    ---
    NOTE: Start thur
    Frontend:
    FrontEnd: Jest revision complete *2
    FrontEnd: cypress revision complete *2
    FrontEnd: Next revision *2, react revision *2, js revision *2
    NEEDED: Next.js course
    NEEDED: React course
    NOTE: End thur
    NOTE: Start
    FrontEnd: Next i8n
    FrontEnd: jest and cypress test should be above 75%
    FrontEnd: add google login and sign up
    FrontEnd: Ci/CD the Frontend
    BackEnd: dockerize and test it in a docker container - development
    BackEnd: dockerize and test it in a docker container - production
    NOTE: End
    ---
    ---
    Node:
    backEnd: Node revision *2
    backend: convert the backEnd to class for easier testing
    backend: change everything to drizzle ORM
    backend: watch video on graphQl and jwt authentication
    backend: finish working on the graphQl side
    backend: finish test coverage 75%
    backend: write the ci/cd for the backend, make sure the test coverage is above 90%
    sort {
        graphql and jwt {1st_half and 2nd_half} - course, then integrate it
        backend & frontend: testing of Apollo - BackEnd
        Generating apollo types, if there is any need for this
        testing of Apollo - frontend {
            apollo - set up Development & testing
            apollo - set up performance
            apollo - set up integration
            apollo - set up Networking
        }
    }
    ---
    ---
    infra
    dockerize both app and test in a docker environment
    test both apps on docker and be sure that they are working as expected
    test both app in production environment on docker and be sure that they are working as expected
    sort out videos so you can pick-up the ones with the hosting
    deploy client and server as docker containers on both railway and aws
    ---
    ---
    MyVs - Nodejs
    MyTracker - Golang {
        visualization course
    }
    ---
    ---
    ---


    ---
    ---
    ---
    later {

    }

    envs for testing {
        export ENV="development"
        export BG_USER="development"
        ---
        export ENV="continuous_integration"
        export PORT=4000
        export TIMEZONE=Africa/Lagos
        export DB_NAME=template_test_db
        export POSTGRES_DB_USER=postgres
        export POSTGRES_DB_PASSWORD=password
        export POSTGRES_DB_PORT=5432
        export MYSQL_DB_USER=root
        export MYSQL_DB_PASSWORD=root
        export MYSQL_DB_PORT=3306
        export JWT_SECRET=SGARcuH2uNZ4NNvqXo31H7erq94H2yA17Y6tqLlqpt0=
        export JWT_TIME_1=7
        export JWT_TIME_2=365

    }
    testing {
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
        go test -v ./...
        go test -v
    }
    explanation {
        go test -coverprofile=coverage.out ./...  ===  print out the coverage of your test
        go tool cover -html=coverage.out -o coverage.html  ====   convert the printout into html so you can see it on the web
        go tool cover -func=coverage.out  ===  see the total average of your test cover for all the test
        go test -v && go test -v ./... ===  verbose testing
    }
    read_response_for_test {
		// Read the response body
		responseBody, _ := io.ReadAll(resp.Body)
		responseBodyStr := string(responseBody)
		fmt.Printf("Response body: %s", responseBodyStr)
    }
}

updating a go project from one to the other {
    1.
    mkdir myProject
    cd myProject
    go mod init example.com/myProject

    2.
    go mod edit -module=github.com/username/projectName {
        Update Module Path When Ready: Once youâ€™re ready to finalize the module path, update the go.mod file to reflect the correct path. You can do this by editing the module directive in go.mod:
        module github.com/username/projectName
    }

    3.
    goimports -w .
}