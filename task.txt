

---
NOTE: try both the front and backend on docker

NEEDED: key goals {
    Go: Finish Go backend for everything
    Go: Finish testing
    Go: Finish Go backend CI/CD
    -
    Node: Finish Node backend testing
    Node: Finish Node backend CI/CD
    Node: Finish Node backend testing
    Node: Finish Node backend testing
    -
    Frontend: Finish the jest test and coverage
    Frontend: Finish the cypress test and coverage
    Frontend: Finish the Frontend test CI/CD
}
NEEDED: when all keyGoals is completed, please start my us vs and OdiUp


deploy {
    deploy to staging and make sure working when merged with main branch
    ---
    deploy staging to aws and test to make sure all is working properly
    create your database @ railway for staging
}
Todo {
    ---
    ---
    NOTE: Start Mon

    DONE: work on testing to be over 80%
    Golang
    commit all the changes so far
    work on the remaining testing and take them to minimum 75% except main.go

    convert the beforeEach to be a central function {
        don't set the env from the test, set the env from the run time
        use a make function to set the env variable and the run the test 
    }
    backEnd: Test the the the env been continuous_integration
    backEnd: ci/cd integration
    3:30-6:00
    NOTE: End Mon
    NOTE: Start Tue
    backEnd: start the FrontEnd and test it with go backEnd
    backEnd: work on the logging out {
        use middleware to verify if the user can visit this link
    }
    write test for logging out
    backend: add cors to the application

    dockerize and test it in a docker container - development
    dockerize and test it in a docker container - production
    NOTE: End Tue
    ---
    ---
    Frontend:
    FrontEnd: Next i8n
    FrontEnd: jest and cypress test should be above 75%
    FrontEnd: add google login and sign up
    FrontEnd: Ci/CD the Frontend
    ---
    ---
    Node:
    backend: convert the backEnd to class for easier testing
    backend: change everything to drizzle ORM
    backend: watch video on graphQl and jwt authentication
    backend: finish working on the graphQl side
    backend: finish test coverage 75%
    backend: write the ci/cd for the backend, make sure the test coverage is above 90%
    sort {
        graphql and jwt {1st_half and 2nd_half} - course, then integrate it
        backend & frontend: testing of Apollo - BackEnd
        Generating apollo types, if there is any need for this
        testing of Apollo - frontend {
            apollo - set up Development & testing
            apollo - set up performance
            apollo - set up integration
            apollo - set up Networking
        }
    }
    ---
    ---
    infra
    dockerize both app and test in a docker environment
    test both apps on docker and be sure that they are working as expected
    test both app in production environment on docker and be sure that they are working as expected
    sort out videos so you can pick-up the ones with the hosting
    deploy client and server as docker containers on both railway and aws
    ---
    ---
    MyVs - Nodejs
    MyTracker - Golang
    ---
    ---
    ---


    ---
    ---
    ---
    later {

    }

    testing {
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
        go test -v ./...
        go test -v
    }
    explanation {
        go test -coverprofile=coverage.out ./...  ===  print out the coverage of your test
        go tool cover -html=coverage.out -o coverage.html  ====   convert the printout into html so you can see it on the web
        go tool cover -func=coverage.out  ===  see the total average of your test cover for all the test
        go test -v && go test -v ./... ===  verbose testing
    }
    read_response_for_test {
		// Read the response body
		responseBody, err := io.ReadAll(resp.Body)
		require.NoError(t, err)

		// Convert response body to a string
		responseBodyStr := string(responseBody)

		// Print the response body for debugging
		fmt.Printf("Response body: %s", responseBodyStr)
    }
}

updating a go project from one to the other {
    1.
    mkdir myProject
    cd myProject
    go mod init example.com/myProject

    2.
    go mod edit -module=github.com/username/projectName {
        Update Module Path When Ready: Once youâ€™re ready to finalize the module path, update the go.mod file to reflect the correct path. You can do this by editing the module directive in go.mod:
        module github.com/username/projectName
    }

    3.
    goimports -w .
}