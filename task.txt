deploy {
    deploy to staging and make sure working when merged with main branch
    ---
    deploy staging to aws and test to make sure all is working properly
    create your database @ railway for staging
}
Todo {
    NOTE: 
    Golang Backend:
    NEEDED: frontend graphQl up and running {
        NEEDED: frontEnd graphQl up and running
    }
    graphQl {
        integrate graphql into golang
        integrate graphQl and jwt {
            watch that video from that guy first
        }
        https://github.com/99designs/gqlgen
    }
    graphQl testing
    NEEDED: Docker completion {
        Re-answer all questions
        All Dockerfile writeup
        All docker-compose writeup
        remaining revisions and questions
    }
    dockerize and test it in a docker container - development & production
    -
    NOTE: End thur
    ---
    ---
    NOTE: Start
    FrontEnd:
    fri:
    finish cypress for all routes (test should be above 75%) {
        commit all changes
        check that all jest test are working with all these changes
        delete the my config
        -
        work on env testing to determine if to use mock or real-time testing
        work on login route {
            successful login
            error when user try to login
            work with real database and with mock
        }
        8:00am

        work on logout route {
            successful logout
            error when user try to logout
        }
        work on register route {
            successful register
            error when user try to register
        }
        work on theme selection
        9am
    }
    CI/CD the Frontend for cypress and jest
    10am
    change the site to use i8n
    modify the Success message from login and register backend to instead use i18n from frontEnd
    1:00am
    --
    sun:
    NEEDED: graphQl revision
    check the graphQl code and start integrating with golang 
    Generating apollo types, if there is any need for this
    testing of Apollo - frontend {
        apollo - set up Development & testing
        apollo - set up performance
        apollo - set up integration
        apollo - set up Networking
    }
    ---
    ---
    mon:
    add google login and sign up {react-google-login}
    dockerize and test it in a docker container - development & production
    ---
    ---
    NOTE: End
    ---
    ---
    Node:
    NEEDED: drizzle orm
    NEEDED: backEnd: Node revision *2
    backEnd: Rebuild from the ground up to make it easier for testing
    backend: convert the backEnd to class for easier testing
    backend: change everything to drizzle ORM
    backend: watch video on graphQl and jwt authentication
    backend: finish working on the graphQl side (graphql and jwt video)
    backend: finish test coverage 75%
    backend: write the ci/cd for the backend, make sure the test coverage is above 75%
    ---
    ---
    MyVs: Node {}
    OdiUp: Golang {
    }
    StickerMule: Node {}
    ConvertKit: Ruby | Golang
    ---
    ---
    Infrastructure
    deploy client and server as docker containers on both railway and aws
    ---
    ---


    envs for testing {
        export ENV="development"
        export BG_USER="development"
        ---
        export ENV="continuous_integration"
        export PORT=4000
        export TIMEZONE=Africa/Lagos
        export DB_NAME=template_test_db
        export POSTGRES_DB_USER=postgres
        export POSTGRES_DB_PASSWORD=password
        export POSTGRES_DB_PORT=5432
        export MYSQL_DB_USER=root
        export MYSQL_DB_PASSWORD=root
        export MYSQL_DB_PORT=3306
        export JWT_SECRET=SGARcuH2uNZ4NNvqXo31H7erq94H2yA17Y6tqLlqpt0=
        export JWT_TIME_1=7
        export JWT_TIME_2=365
    }
    testing {
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
        go test -v ./...
        go test -v
    }
    explanation {
        go test -coverprofile=coverage.out ./...  ===  print out the coverage of your test
        go tool cover -html=coverage.out -o coverage.html  ====   convert the printout into html so you can see it on the web
        go tool cover -func=coverage.out  ===  see the total average of your test cover for all the test
        go test -v && go test -v ./... ===  verbose testing
    }
    read_response_for_test {
		// Read the response body
		responseBody, _ := io.ReadAll(resp.Body)
		responseBodyStr := string(responseBody)
		fmt.Printf("Response body: %s", responseBodyStr)
    }
}

updating a go project from one to the other {
    1.
    mkdir myProject
    cd myProject
    go mod init example.com/myProject

    2.
    go mod edit -module=github.com/username/projectName {
        Update Module Path When Ready: Once youâ€™re ready to finalize the module path, update the go.mod file to reflect the correct path. You can do this by editing the module directive in go.mod:
        module github.com/username/projectName
    }

    3.
    goimports -w .
}