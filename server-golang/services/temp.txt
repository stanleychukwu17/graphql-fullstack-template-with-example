4. Refactor Tests
Write unit tests for the UsersController using mock implementations of the UserService interface. Here’s a simple example of how you might structure a test using the testify library for mocking:

package controllers_test

import (
	"testing"
	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/controllers"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/models"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/services"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/utils"
	"strings"
)

type MockUserService struct {
	mock.Mock
}

func (m *MockUserService) CreateUser(user *models.User) error {
	args := m.Called(user)
	return args.Error(0)
}

func (m *MockUserService) FindUserByUsernameOrEmail(username, email string) (*models.User, error) {
	args := m.Called(username, email)
	return args.Get(0).(*models.User), args.Error(1)
}

// Other methods ...

func TestRegisterUser(t *testing.T) {
	app := fiber.New()
	mockService := new(MockUserService)
	controller := &controllers.UsersController{
		UserService: mockService,
	}

	app.Post("/register", controller.RegisterUser)

	t.Run("Successful registration", func(t *testing.T) {
		user := models.User{
			Name:     "Test User",
			Username: "testuser",
			Email:    "test@example.com",
			Password: "password123",
			Gender:   "male",
		}

		mockService.On("FindUserByUsernameOrEmail", user.Username, user.Email).Return(nil, nil)
		mockService.On("CreateUser", &user).Return(nil)

		body := `{
			"name": "Test User",
			"username": "testuser",
			"email": "test@example.com",
			"password": "password123",
			"gender": "male"
		}`

		req := httptest.NewRequest("POST", "/register", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusCreated, resp.StatusCode)
	})

	t.Run("User already exists", func(t *testing.T) {
		user := models.User{
			Username: "testuser",
			Email:    "test@example.com",
		}

		mockService.On("FindUserByUsernameOrEmail", user.Username, user.Email).Return(&user, nil)

		body := `{
			"username": "testuser",
			"email": "test@example.com",
			"password": "password123",
			"gender": "male"
		}`

		req := httptest.NewRequest("POST", "/register", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusUnprocessableEntity, resp.StatusCode)
	})
}


b. Test for LoginThisUser
Here’s how you can write a test for the LoginThisUser method:

func TestLoginThisUser(t *testing.T) {
	app := fiber.New()
	mockService := new(MockUserService)
	controller := &controllers.UsersController{
		UserService: mockService,
	}

	app.Post("/login", controller.LoginThisUser)

	t.Run("Successful login", func(t *testing.T) {
		user := models.User{
			ID:       1,
			Name:     "Test User",
			Username: "testuser",
			Password: utils.HashPassword("password123"), // assuming you have a working hash function
		}

		mockService.On("FindUserByUsernameOrEmail", user.Username, user.Username).Return(&user, nil)
		mockService.On("FindActiveSession", user.ID).Return(nil, nil)
		mockService.On("CreateSession", user.ID).Return(&models.UsersSession{ID: 1, FakeId: 1234}, nil)

		body := `{
			"username": "testuser",
			"password": "password123"
		}`

		req := httptest.NewRequest("POST", "/login", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusOK, resp.StatusCode)
	})

	t.Run("Invalid credentials", func(t *testing.T) {
		mockService.On("FindUserByUsernameOrEmail", "testuser", "testuser").Return(nil, nil)

		body := `{
			"username": "testuser",
			"password": "wrongpassword"
		}`

		req := httptest.NewRequest("POST", "/login", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusUnauthorized, resp.StatusCode)
	})
}

4. Refactor Tests (Continued)
Here’s how you can complete the tests for the RegisterUser and LoginThisUser methods using a mock implementation of the UserService interface.

a. Complete the Test for RegisterUser
package controllers_test

import (
	"testing"
	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/controllers"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/models"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/services"
	"github.com/stanleychukwu17/graphql-fullstack-template-with-example/server-golang/utils"
	"strings"
)

type MockUserService struct {
	mock.Mock
}

func (m *MockUserService) CreateUser(user *models.User) error {
	args := m.Called(user)
	return args.Error(0)
}

func (m *MockUserService) FindUserByUsernameOrEmail(username, email string) (*models.User, error) {
	args := m.Called(username, email)
	return args.Get(0).(*models.User), args.Error(1)
}

// Other methods ...

func TestRegisterUser(t *testing.T) {
	app := fiber.New()
	mockService := new(MockUserService)
	controller := &controllers.UsersController{
		UserService: mockService,
	}

	app.Post("/register", controller.RegisterUser)

	t.Run("Successful registration", func(t *testing.T) {
		user := models.User{
			Name:     "Test User",
			Username: "testuser",
			Email:    "test@example.com",
			Password: "password123",
			Gender:   "male",
		}

		mockService.On("FindUserByUsernameOrEmail", user.Username, user.Email).Return(nil, nil)
		mockService.On("CreateUser", &user).Return(nil)

		body := `{
			"name": "Test User",
			"username": "testuser",
			"email": "test@example.com",
			"password": "password123",
			"gender": "male"
		}`

		req := httptest.NewRequest("POST", "/register", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusCreated, resp.StatusCode)
	})

	t.Run("User already exists", func(t *testing.T) {
		user := models.User{
			Username: "testuser",
			Email:    "test@example.com",
		}

		mockService.On("FindUserByUsernameOrEmail", user.Username, user.Email).Return(&user, nil)

		body := `{
			"username": "testuser",
			"email": "test@example.com",
			"password": "password123",
			"gender": "male"
		}`

		req := httptest.NewRequest("POST", "/register", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusUnprocessableEntity, resp.StatusCode)
	})
}
b. Test for LoginThisUser
Here’s how you can write a test for the LoginThisUser method:

func TestLoginThisUser(t *testing.T) {
	app := fiber.New()
	mockService := new(MockUserService)
	controller := &controllers.UsersController{
		UserService: mockService,
	}

	app.Post("/login", controller.LoginThisUser)

	t.Run("Successful login", func(t *testing.T) {
		user := models.User{
			ID:       1,
			Name:     "Test User",
			Username: "testuser",
			Password: utils.HashPassword("password123"), // assuming you have a working hash function
		}

		mockService.On("FindUserByUsernameOrEmail", user.Username, user.Username).Return(&user, nil)
		mockService.On("FindActiveSession", user.ID).Return(nil, nil)
		mockService.On("CreateSession", user.ID).Return(&models.UsersSession{ID: 1, FakeId: 1234}, nil)

		body := `{
			"username": "testuser",
			"password": "password123"
		}`

		req := httptest.NewRequest("POST", "/login", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusOK, resp.StatusCode)
	})

	t.Run("Invalid credentials", func(t *testing.T) {
		mockService.On("FindUserByUsernameOrEmail", "testuser", "testuser").Return(nil, nil)

		body := `{
			"username": "testuser",
			"password": "wrongpassword"
		}`

		req := httptest.NewRequest("POST", "/login", strings.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		resp, err := app.Test(req)
		require.NoError(t, err)

		require.Equal(t, fiber.StatusUnauthorized, resp.StatusCode)
	})
}